const functions = require('firebase-functions');
const admin = require('firebase-admin');

// Initialize Firebase Admin SDK
// This happens automatically in Cloud Functions, no need for service account key file
admin.initializeApp();

// Firebase Realtime Database reference
const db = admin.database();

/**
 * HTTP Callable Cloud Function to create a new public user.
 * This function is accessible only by authenticated administrators.
 * It handles creating the user in Firebase Auth and storing their profile in RTDB.
 */
exports.createPublicUser = functions.https.onCall(async (data, context) => {
    // 1. Authenticate the caller: Ensure an authenticated user is making the request.
    if (!context.auth) {
        throw new functions.https.HttpsError('unauthenticated', 'Only authenticated users can call this function.');
    }

    const callerUid = context.auth.uid; // The UID of the user who is calling this function

    // 2. Authorize the caller: Check if the authenticated caller is an administrator.
    try {
        const adminUserSnapshot = await db.ref(`users/${callerUid}`).once('value');
        const adminUserData = adminUserSnapshot.val();

        if (!adminUserData || !adminUserData.isAdmin) {
            console.warn(`Permission denied: User ${callerUid} attempted to create a user but is not an admin.`);
            throw new functions.https.HttpsError('permission-denied', 'Only administrators can create public user accounts.');
        }
    } catch (error) {
        // Catch any errors during the admin check itself
        console.error("Error verifying admin status:", error);
        throw new functions.https.HttpsError('internal', 'Failed to verify administrator status.', error.message);
    }

    // 3. Extract user data from the request
    const { username, password } = data;

    // 4. Validate input
    if (!username || !password) {
        throw new functions.https.HttpsError('invalid-argument', 'Username and password are required.');
    }
    if (password.length < 6) {
        throw new functions.https.HttpsError('invalid-argument', 'Password must be at least 6 characters long.');
    }

    // Create a consistent dummy email for Firebase Authentication
    // Ensure the domain is unique and doesn't conflict with real emails if possible
    const dummyEmail = `${username.toLowerCase()}@yourchatapp.com`; // Changed domain for better uniqueness

    try {
        // 5. Check if a user with this username (via dummy email) already exists in Firebase Auth
        try {
            await admin.auth().getUserByEmail(dummyEmail);
            // If getUserByEmail succeeds, a user with this email already exists.
            throw new functions.https.HttpsError('already-exists', 'A user with that username already exists.');
        } catch (error) {
            // If the error code is 'auth/user-not-found', it means the email is available, so we can proceed.
            // Any other error means a problem checking existence.
            if (error.code !== 'auth/user-not-found') {
                console.error(`Error checking for existing user by email ${dummyEmail}:`, error);
                throw new functions.https.HttpsError('internal', 'Failed to check for existing username.', error.message);
            }
            // If user-not-found, we proceed to create the user below.
        }

        // 6. Create the new user in Firebase Authentication
        const userRecord = await admin.auth().createUser({
            email: dummyEmail,
            password: password,
            displayName: username, // Set display name for potential use in Firebase Auth
        });

        const newUid = userRecord.uid; // The new user's UID generated by Firebase Auth

        // 7. Store the new user's profile in the Realtime Database
        await db.ref(`users/${newUid}`).set({
            uid: newUid,
            username: username,
            email: dummyEmail, // Store the dummy email for future reference
            isAdmin: false,    // Crucially, mark this user as NOT an admin
            createdAt: admin.database.ServerValue.TIMESTAMP, // Use server timestamp
        });

        // 8. Return success response
        return {
            status: 'success',
            message: `User "${username}" created successfully.`,
            uid: newUid,
            // You can return more data if needed by the client
        };

    } catch (error) {
        // Log the error and return a detailed HttpsError to the client
        console.error("Error during public user creation Cloud Function:", error);

        // Check if it's already an HttpsError to re-throw directly
        if (error.code && error.details) {
            throw error;
        }
        // Generic error for unexpected issues
        throw new functions.https.HttpsError('unknown', 'Failed to create public user account.', error.message);
    }
});
